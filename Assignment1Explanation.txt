//Q1  
This code includes import statements to bring in necessary classes and functionalities. The main method serves as the entry point of the program and prompts the user to enter a positive integer using the Scanner class. The entered number is stored in a variable. An ArrayList is used to store the smallest factors of the input number. The getSmallestFactors method calculates the factors by iterating from 2 to the input number and updating the factors list accordingly. The factors list is then sorted in decreasing order. Finally, the factors are displayed using a loop. Overall, the code takes user input, calculates and sorts the factors, and displays them in decreasing order.

  Import Statements: These lines at the beginning of the code tell Java to include certain predefined classes and functionalities. In this code, we import the ArrayList, Collections, and Scanner classes to use their respective features.

    Main Method: This is the entry point of the program. When the program runs, it starts executing from the main method. It has the public static void main(String[] args) signature.

    Scanner: The Scanner class allows us to read user input from the console. Here, we create a Scanner object named input to read user input.

    Prompting for User Input: The program asks the user to enter a positive integer using System.out.print to display the message and input.nextInt() to read the integer input from the user. The entered number is stored in the number variable.

    ArrayList: An ArrayList is a dynamic array-like structure that can hold multiple elements. In this code, we create an ArrayList named factors to store the smallest factors of the input number.

    getSmallestFactors Method: This method calculates the smallest factors of a given number. It takes an integer number as input and returns an ArrayList<Integer> containing the factors.

    Finding Smallest Factors: Inside the getSmallestFactors method, a for loop is used to iterate from 2 to the input number. It checks if the current number (i) is a factor of the input number (number). If it is, it adds i to the factors list and updates the number by dividing it with i.

    Sorting in Decreasing Order: After obtaining the factors in the factors list, we use Collections.sort(factors, Collections.reverseOrder()) to sort the list in decreasing order. This ensures that the smallest factors are displayed in the desired order.

    Displaying the Factors: Finally, a for-each loop is used to iterate through the factors list. Each factor is printed using System.out.print(factor + " "). The loop continues until all factors have been displayed.

    Conclusion: The code prompts the user for a positive integer, calculates its smallest factors, sorts them in decreasing order, and displays them. By breaking down the code into smaller components, we can understand how each part contributes to achieving this functionality.


//Q2
This code prompts the user to enter three numbers and stores them in variables. It then sorts the numbers in increasing order using conditional statements and displays them. Overall, the code takes user input, sorts the numbers, and displays them in ascending order.

    Import Statement: This code does not have any import statements.

    Main Method: This is the entry point of the program. It prompts the user to enter three numbers using the Scanner class. The numbers are stored in variables num1, num2, and num3.

    displaySortedNumbers Method: This method takes three numbers as input and displays them in increasing order.

    Sorting the Numbers: Inside the displaySortedNumbers method, the numbers are sorted using a series of conditional statements and a temporary variable temp. The if statements compare the numbers and swap their positions if necessary to ensure that num1 is the smallest, num2 is in the middle, and num3 is the largest.

    Displaying the Numbers: After sorting the numbers, the method displays them in increasing order using System.out.println().

    Output: Finally, based on the user's input, the program displays the three numbers in increasing order.

Overall, this code allows the user to input three numbers and then arranges and displays them in ascending order.

//Q3
This code allows the user to input an integer and determines whether it is a palindrome. The main method prompts the user for an integer and stores it. The isPalindrome method reverses the number using a while loop and checks if the original number and the reversed number are equal to determine if it is a palindrome. Finally, based on the result, the program displays a message indicating whether the entered number is a palindrome or not.

    Import Statement: This code does not have any import statements.

    Main Method: This is the entry point of the program. It prompts the user to enter an integer using the Scanner class and stores it in the variable number.

    isPalindrome Method: This method checks whether a given integer is a palindrome. It takes an integer number as input and returns a boolean value (true if the number is a palindrome, false otherwise).

    Reversing the Number: Inside the isPalindrome method, the number is reversed using a while loop. The original number is stored in the variable originalNumber. The loop extracts the rightmost digit of the number using the modulus operator % and builds the reversed number by multiplying the existing reversed number by 10 and adding the extracted digit.

    Checking for Palindrome: After reversing the number, the method checks if the original number and the reversed number are equal. If they are equal, it means the number is a palindrome, and the method returns true. Otherwise, it returns false.

    Output: Finally, based on the result returned by the isPalindrome method, the program displays a message stating whether the entered number is a palindrome or not.

------------------------------------------------------------------------------------------------------------------------------

//Q1
Overall, the code takes user input, calculates and sorts the factors, and displays them in decreasing order. This code uses import statements to bring in necessary classes and functionalities. Below that we have the class smallest factors that defines that main function. It then allocates memory for a new object called input, prompts the user to enter a positive integer.Stores the values in the variable factors and makes it equal to the getSmallestFactors() method. The getSmallestFactors() method is invoked and calculates the factors by iterating from 2 to the input number and updating the factors list accordingly. Finally, the factors are displayed using a loop. 

//Q2
This code prompts the user to enter three numbers and stores them in variables num1, num2, num3. We import the Scanner method from the util class. Inside the main method we allocate memory for an object called scanner. We print a series of messages to get the user to enter 3 numbers. We store the values scanned in into the double variables num1, num2, num3. We invoke the  displaySortedNumbers(num1, num2, num3) method, inside this method we use the users numbers and we use conditional if statements to compare the numbers and swap their positions if necessary to ensure that num1 is the smallest, num2 is in the middle, and num3 is the largest. After sorting we print the output to the screen using the method System.out.println() method.

//Q3
This code allows the user to input an integer and determines whether the integer is a palindrome or not if it is it displays a message that it is and if it isnt it displays a message that it isn't. A palindrome is any number that reads the same forwards and backwards. We prompt the user to enter an integer and use the Scanner class to store it to the variable. The isPalindrome() method is invoked inside a conditional statement that checks if it is indeed a palindrome or not. isPalindrome() method checks whether a given integer is a palindrome. It takes an integer number as input and returns a boolean value (true if the number is a palindrome, false otherwise). We reverse the number using a while loop. The original number is stored in the variable originalNumber. The loop extracts the rightmost digit of the number using the modulus operator % and builds the reversed number by multiplying the existing reversed number by 10 and adding the extracted digit. After reversing the number, the method checks if the original number and the reversed number are equal. If they are equal, it means the number is a palindrome, and the method returns true. Otherwise, it returns false. Finally, based on the result returned by the isPalindrome method, the program displays a message stating whether the entered number is a palindrome or not.

